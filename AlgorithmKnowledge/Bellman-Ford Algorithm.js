// 벨만 포드 알고리즘
// 최단 거리 구하기

// 음수 간선의 순환이 포함된 상태에서 최단 거리를 구하게 된다면
//     음의 무한인 노드가 발생할 수 있는 문제가 있음
//     => 벨만 포드 알고리즘으로 해결 가능

// 음수 간선에 관하여 최단 경로 문제는 아래와 같이 분류 가능
//     모든 간선이 양수인 경우
//     음수 간선이 있는 경우
//         음수 간선 순환은 없는 경우
//         음수 간선 순환이 있는 경우
//     음수 간선의 순환을 감지 가능
//     기본 시간 복잡도는 O(VE)로 다익스트라 알고리즘에 비해 느림

// 벨만 포드 알고리즘 특징
//     출발 노드를 설정
//     최단 거리 테이블을 초기화
//     다음의 과정을 N - 1번 반복
//         전체 간선 E개를 하나씩 확인
//         각 간선을 거쳐서 다른 노드로 가능 비용을 계산하여 최단 거리 테이블 갱신
//     만약 음수 간선 순환이 발생하는지 체크하고 싶다면 위의 과정을 한 번 더 반복
//         이 때, 최단 거리 테이블이 갱신된다면 음수 간선 순환이 존재

// 다익스트라 vs 벨만 포드
//     다익스트라
//         매번 방문하지 않는 노드 중에서 최단 거리가 가장 짧은 노드 선택
//         음수 간선이 없다면 최적의 해 발견 가능
//     벨만 포드
//         매번 모든 간선 확인
//             따라서 다익스트라 알고리즘에서의 최적의 해를 항상 포함
//         다익스트라에 비해 시간이 오래 걸리지만 음수 간선 순환 탐지 가능