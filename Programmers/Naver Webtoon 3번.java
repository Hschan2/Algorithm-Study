// 찾아 바꾸기라는 기능이 핵심인 문제다. 바로 예시로 들어가면, 
// "aabcbcd" 라는 문자열에서 "abc"라는 문자열을 제거하고 싶을 때, 
// 찾아 바꾸기 1번 실행하면 "abcd"가 된다. 
// 이 때 "abc"가 1번 더 생기므로 한번 더 찾아 바꾸기를 실행하여 "d"로 바꿀 수 있다.
// 더 이상 "abc" 문자열이 존재하지 않으므로 총 2번의 찾아 바꾸기 과정을 통해 
// 문자열을 바꾸게 되는것이다. 

// 검색하고자 하는 문장 s에서 문자열 t를 찾아 제거할 때, 
// 총 몇 번의 찾아 바꾸기를 진행해야 문장 s에서 t가 더 이상 존재하지 않는지 
// 계산하는 함수를 완성하시오.

// 제한사항

// ⊙ 문자열 s : 길이는 1,000,000 이하의 자연수이며, 소문자로만 이루어져 있습니다.
// ⊙ 문자열 t : 길이는 10 이하의 자연수이며, 소문자로만 이루어져 있습니다. (단 문자열 t의 문자들은 중복되지 않습니다.)

// 테스트 케이스
// s                    t                result
// "aabcbcd"            "abc"            2
// "aaaaabbbbb"         "ab"             5

public static int solution(String s, String t) {

    int count = 0;

    while (s.contains(t)) {
        s = s.replaceFirst(t, ""); // replaceFirst => 앞 인자를 처음 발견했을 때, ""로 변경. 처음 발견한 같은 문자만 변경하는 것
        count++;
    }

    return count;
}